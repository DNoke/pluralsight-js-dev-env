*****************************************************
Description:
	Notes from Pluralsight course
	Building a JavaScript Development Environment

	Creates Starter Kit to develop JavaScript
 	projects
*****************************************************
Editors and Configuation:
	Look for support for new JavaScript features
	Support auto complete
	Parse ES6 imports
	Automated refactoring
	Support built in terminal

	Visual Studio Code (recommended)
	Atom
	Webstorm (not free)
	Brackets

	Editorconfig (recommended)
	  create an .editorconfig in root directory
*****************************************************
Package Management:
	npm (recommended)
	Bower
	JSPM
	Jam
	Volo

	package.json - stores packages that project uses
			as well as npm scripts

	open terminal run:
		npm install (downloads and installs packages)

	Node Security Platform:
		nsp check
*****************************************************
Development Web Server:
	express (recommended)
	http-server
	live-server
	budo
	Webpack dev server
	Browsersync

	express -installed with npm
		create a folder named buildScripts in project
		create a file named srcServer.js
		   -this file configures a web server that will serve
	 	     files from source directory

Sharing Work-in-Progress
	localtunnel (recommended)
	ngrok
	Surge
	now

	Setup:
	  1. npm install localtunnel -g
	  2. Start your app
	  3. lt --port 3000
*****************************************************
Automation:
	npm scripts (recommended)
	Grunt
	Gulp

	Modify the package.json file - under scripts
	  section
	  Ex: "start": "node buildScripts/srcServer.js"
	  In terminal run: npm start  - this will
		execute the "start" script

    "prestart": "node buildScripts/startMessage.js",
   //runs before start
    "start": "npm-run-all --parallel security-check open:src",
 //runs all listed scripts in parallel
    "open:src": "node buildScripts/srcServer.js",

    "security-check": "nsp check",

    "share": "lt --port 3000"
*****************************************************
Transpiling:
	Taking source code written in one language
 	and transforming into another language

	Babel (recommened)
	TypeScript
	Elm

	Babel - can be configured with .babelrc file
          or package.json.  Preferred method is to
	  use babel.rc file placed in root directory
    If you get an error when running Mocha, change
      preset to:
          "presets": [
            "es2015"]
*****************************************************
Bundling:
     Webpack (recommended)
     RequireJS (outdated)
     browserify
     Rollup
     JSPM

     IIFE (immediately invoked function expressions)
        (function(){
          //code here
        })();

     Asynchronous Module Definition (AMD)
          define(['jq'], function(jq){});

     CommonJS (CJS)
        var jquery = require('jquery');

     Universal Module Definition (UMD)

     ES6  Modules (ES 2015)
        import jQuery from 'jQuery'


   File configures bundling:
   Webpack.config.dev.js

   Need to set up server to use Webpack
     in buildScripts/srcServer add
        import webpack from 'webpack'
        import config from '../webpack.config.dev'

  To use style sheets create index.css
    -add to index.js file -  import './index.css';

  Source Maps:
      Allow ability to debug code generated by webpack
      Map code back to original source - only downloaded
        when using developer tools (devtool: 'inline-soruce-map')
        add debugger; to line you want to break on


*****************************************************
Linting:
    Why? - consistancy, avoid mistakes
    ESLint (recommended)
    JSHint
    JSLint (original)

    Config format: files used for configuartion are-
        .eslintrc.js, .eslintrc.yaml, .eslintrc.yml
        .eslintrc.json, .eslintrc, package.json

    To add to package.json add section (example)
        {
          "eslintConfig":{
              "plugins":["example"],
              "env":{
                "example/custom": true
              }
          }
        }

      Plugins can be used for frameworks such as angular, node.js
      ESlint doesn't watch files.  Use eslint-loader (Webpack re-lints
      all files when files are saved) - eslint-watch (recommend - adds
      file watching capability - not tied to webpack.) Babel-eslint (
        allows linting of experimental features)

   Setup:
      Add file to root: .eslintrc.json
           code from bit.ly/jsdeveslint

      In the package.json file add linting as follows:
        "lint": "esw webpack.config.* src build/Scripts",
        esw is the executable for eslint-watch - files
        are passed in as parameters.

      If your editor has automatic linting disable
        before updating package.json.  Also if
        you have an .eslintrc in your user directory
        delete the file

      "lint": "esw webpack.config.* src buildScripts",
      "lint:watch": "npm run lint -- --watch",

*****************************************************
Testing:
      Mocha (recommended)
      Jasmine
      Tape (simplist)
      QUnit
      AVA (runs tests in parrel)
      Jest

      Mocha doesn't come with a assertion library

      Assertion libraries:
      Chai - the most popular assertion library

      Helper libraries:
      JSDOM - helper library - simulates the browers DOM
      Cheerio - jQuery for the server

      Where to run test?
      Thru the browser with Karma or Testem
      Headless browser using PhantomJS
      In memory DOM (JSDOM)

      Where to put test files?
      Centralized in folder named test
      Alongside - in same folder as /src

      When to run tests?
      Unit test - run after saving file.
*****************************************************
Continuous Integration:
    Everyone needs to be informed when the build breaks.
    CI Server builds application automatically when code is committed.
    Runs test suite
    Can automate deployment

    Travic (recommended for Linux)
    Appveyor (recommended for Windows)
    Jenkins
    CircleCI
    Semaphore
    SnapCI





